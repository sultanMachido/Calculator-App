{"version":3,"sources":["logo.svg","components/Button/Button.css","components/Display/Display.css","container/Calculator/Calculator.css","App.css","serviceWorker.js","components/Button/Button.js","components/Display/Display.js","Hoc/Auxil/Auxil.js","container/Calculator/Calculator.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","button","number","add","className","classes","Button","onClick","display","stringValue","result","Display","auxil","props","children","Calculator","state","calculatorButtons","values","addValuesHandler","e","newValue","lastOperatorSeen","arr","arrLastOperandIndex","console","log","target","innerHTML","duplicateValuesState","lastOperandIndex","length","alert","lastVal","splice","concat","map","item","index","operand","slice","join","parseInt","push","divisionLogic","multiplicationLogic","sumLogic","subtractionLogic","setState","operandOnLeftIndex","operandOnRightIndex","operatorIndex","Auxil","this","numbers","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a1d30ed1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button__Button__3xqYU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Display\":\"Display__Display__YHeu8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Calculator\":\"Calculator__Calculator__3kHW0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App__App__23_S5\",\"App-logo\":\"App__App-logo__1ZbO4\",\"App-logo-spin\":\"App__App-logo-spin__2T_Ou\",\"App-header\":\"App__App-header__21xkG\",\"App-link\":\"App__App-link__19-AX\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport classes from './Button.css';\r\n\r\n\r\nconst button = ({number,add})=>(\r\n    <div className={classes.Button} onClick={add}>\r\n        <h3>{number}</h3>\r\n    </div>\r\n);\r\n\r\n\r\nexport default button;","import React from 'react';\r\nimport classes from './Display.css'\r\n\r\n\r\nconst display =({stringValue,result})=>(\r\n    <div className={classes.Display}>\r\n              {result?<h1>{result}</h1>:<h1>{stringValue}</h1>}\r\n               \r\n            \r\n    </div>\r\n);\r\n\r\nexport default display;","import React from 'react';\r\n\r\n\r\nconst auxil =(props)=>(\r\n    <div>{props.children}</div>\r\n);\r\n\r\nexport default auxil;","import React,{Component} from 'react';\r\nimport Button from '../../components/Button/Button';\r\nimport Display from '../../components/Display/Display';\r\nimport classes from './Calculator.css';\r\nimport Auxil from '../../Hoc/Auxil/Auxil';\r\n\r\nclass Calculator extends Component{\r\n   \r\n    state = {\r\n        calculatorButtons:[1,2,3,4,5,6,7,8,9,'+',0,'-','/','x','=','','cancel',''],\r\n        values:[],\r\n        stringValue:'',\r\n        result:0\r\n    }\r\n    \r\n\r\n    addValuesHandler = (e)=>{\r\n        let newValue;\r\n        let lastOperatorSeen = 0;//index of where the last operator was seen\r\n        let arr = [];\r\n        let result = 0;\r\n        let arrLastOperandIndex = 0;\r\n        let arrLastOperatorSeen = 0;\r\n        \r\n        console.log(e.target.innerHTML);\r\n        const duplicateValuesState = [...this.state.values];\r\n        console.log(duplicateValuesState);\r\n        let lastOperandIndex = duplicateValuesState.length-1;\r\n\r\n        if (e.target.innerHTML === '') {\r\n            alert('hi');\r\n        }\r\n\r\n        //display logic\r\n        if (e.target.innerHTML==='cancel') {\r\n             let lastVal = duplicateValuesState.length - 1;\r\n             duplicateValuesState.splice(lastVal);\r\n             console.log(duplicateValuesState);\r\n             newValue = duplicateValuesState;\r\n        }else if(e.target.innerHTML==='='){\r\n             newValue = duplicateValuesState;\r\n             console.log(duplicateValuesState);\r\n        }else{\r\n            newValue = duplicateValuesState.concat(e.target.innerHTML)\r\n            console.log(duplicateValuesState);\r\n        }\r\n\r\n\r\n         //calculation logic\r\n         if (e.target.innerHTML==='=') {\r\n            console.log('result!');\r\n            \r\n            //splitting input into operator and operand\r\n            duplicateValuesState.map((item,index)=>{\r\n               \r\n\r\n                if (item ==='+') {\r\n                  let operand =  duplicateValuesState.slice(lastOperatorSeen,index).join('');\r\n                  console.log(operand);\r\n                  parseInt(operand);\r\n                  console.log(operand);\r\n                  arr.push(operand);\r\n                  arr.push(item);\r\n                  console.log(index);\r\n                  lastOperatorSeen = index + 1;//1 is added so that the slice is done starting from the number immediately after the last operator seen\r\n                  console.log(lastOperatorSeen);\r\n                  console.log(arr);\r\n                //   result += parseInt(operand);\r\n                //   console.log(result);\r\n                }\r\n\r\n                if (item ==='-') {\r\n                    let operand =  duplicateValuesState.slice(lastOperatorSeen,index).join('');\r\n                    console.log(operand);\r\n                    parseInt(operand);\r\n                    console.log(operand);\r\n                    arr.push(operand);\r\n                    arr.push(item);\r\n                    console.log(index);\r\n                    lastOperatorSeen = index + 1;//1 is added so that the slice is done starting from the number immediately after the last operator seen\r\n                    console.log(lastOperatorSeen);\r\n                    console.log(arr);\r\n                  //   result += parseInt(operand);\r\n                  //   console.log(result);\r\n                  }\r\n\r\n                  if (item ==='/') {\r\n                    let operand =  duplicateValuesState.slice(lastOperatorSeen,index).join('');\r\n                    console.log(operand);\r\n                    parseInt(operand);\r\n                    console.log(operand);\r\n                    arr.push(operand);\r\n                    arr.push(item);\r\n                    console.log(index);\r\n                    lastOperatorSeen = index + 1;//1 is added so that the slice is done starting from the number immediately after the last operator seen\r\n                    console.log(lastOperatorSeen);\r\n                    console.log(arr);\r\n                  //   result += parseInt(operand);\r\n                  //   console.log(result);\r\n                  }\r\n\r\n                  if (item ==='x') {\r\n                    let operand =  duplicateValuesState.slice(lastOperatorSeen,index).join('');\r\n                    console.log(operand);\r\n                    parseInt(operand);\r\n                    console.log(operand);\r\n                    arr.push(operand);\r\n                    arr.push(item);\r\n                    console.log(index);\r\n                    lastOperatorSeen = index + 1;//1 is added so that the slice is done starting from the number immediately after the last operator seen\r\n                    console.log(lastOperatorSeen);\r\n                    console.log(arr);\r\n                  //   result += parseInt(operand);\r\n                  //   console.log(result);\r\n                  }\r\n\r\n                if (lastOperandIndex === index) {\r\n                    let operand =  duplicateValuesState.slice(lastOperatorSeen).join('');\r\n                    console.log(operand);\r\n                    arr.push(operand);\r\n                    console.log(arr);\r\n                    console.log(lastOperatorSeen);\r\n                    console.log(arr[lastOperatorSeen-1]);\r\n                    // if (arr[lastOperatorSeen-1]==='+') {\r\n                    //     result += parseInt(operand); \r\n                    //     console.log(result);\r\n                    // }\r\n\r\n                    // newValue=[' ']; \r\n                    //remove operation display and show result\r\n                }\r\n            })  \r\n            console.log(arr);\r\n            arrLastOperandIndex = arr.length - 1;\r\n\r\n            console.log(arrLastOperandIndex);\r\n\r\n            //arithmetic logic\r\n            // arr.map((item,index)=>{\r\n            //     if (item === \"+\") {\r\n            //         let operand =  arr.slice(arrLastOperatorSeen,index);\r\n            //         arrLastOperatorSeen = index + 1;\r\n            //         console.log(arrLastOperatorSeen);\r\n            //         result += parseInt(operand);\r\n            //         console.log(result);\r\n            //         console.log(arr);\r\n            //     }\r\n            //     console.log(arrLastOperandIndex);\r\n            //     if (arrLastOperandIndex === index) {\r\n            //         let operand =  arr.slice(arrLastOperatorSeen);\r\n            //         console.log(arr[arrLastOperatorSeen - 1]);\r\n            //         if(arr[arrLastOperatorSeen - 1]==='+') {\r\n            //             console.log(operand);\r\n            //             console.log(arr);\r\n            //             result += parseInt(operand); \r\n            //             console.log(result);\r\n            //         }\r\n\r\n            //         newValue=[' ']; //remove operation display and show result\r\n            //     }\r\n            // })\r\n\r\n            //calling the functions based on BODMAS\r\n                    this.divisionLogic(arr);\r\n                    console.log(arr);\r\n                    this.multiplicationLogic(arr);\r\n                    console.log(arr);\r\n                    this.sumLogic(arr)\r\n                    console.log(arr);\r\n                    this.subtractionLogic(arr)\r\n                    console.log(arr);\r\n\r\n                    newValue=[' ']; //remove operation display and show result\r\n\r\n                    result = arr[0];\r\n         }\r\n        console.log(result);\r\n       \r\n        this.setState({\r\n            values:newValue,\r\n            stringValue:newValue.join(''),\r\n            result:result\r\n        });\r\n       \r\n        \r\n\r\n    }\r\n\r\n    divisionLogic=(arr)=>{\r\n        console.log(arr); \r\n        let operandOnLeftIndex;\r\n        let operandOnRightIndex;\r\n        let operatorIndex;\r\n        let result;\r\n        arr.map((item,index)=>{\r\n            console.log(item);\r\n            console.log(index);\r\n            if (item === '/' || arr[index-1] === '/') {\r\n               \r\n             if (arr[index-1] === '/') {\r\n                 operatorIndex = index - 1;\r\n                 operandOnLeftIndex = index - 2;\r\n                 operandOnRightIndex = index ;\r\n                }else{\r\n                 operatorIndex = index;\r\n                 operandOnLeftIndex = index - 1;\r\n                 operandOnRightIndex = index + 1;\r\n                }\r\n               \r\n     \r\n             //    let splicedArr = arr.splice(operandOnLeftIndex,3);\r\n             //    console.log(splicedArr);\r\n                console.log(arr[operandOnLeftIndex]);\r\n     \r\n                \r\n                result = parseInt(arr[operandOnLeftIndex]) / parseInt(arr[operandOnRightIndex]);\r\n               \r\n               \r\n                console.log(result);\r\n                arr[operandOnLeftIndex] = result;\r\n                console.log(arr);\r\n                arr.splice(operatorIndex,operandOnRightIndex)\r\n                console.log(arr);\r\n               \r\n            }\r\n        })\r\n        \r\n     };\r\n    \r\n    \r\n     multiplicationLogic=(arr)=>{\r\n        console.log(arr); \r\n        let operandOnLeftIndex;\r\n        let operandOnRightIndex;\r\n        let operatorIndex;\r\n        let result;\r\n        arr.map((item,index)=>{\r\n            console.log(item);\r\n            console.log(index);\r\n            if (item === 'x' || arr[index-1] === 'x') {\r\n               \r\n             if (arr[index-1] === 'x') {\r\n                 operatorIndex = index - 1;\r\n                 operandOnLeftIndex = index - 2;\r\n                 operandOnRightIndex = index ;\r\n                }else{\r\n                 operatorIndex = index;\r\n                 operandOnLeftIndex = index - 1;\r\n                 operandOnRightIndex = index + 1;\r\n                }\r\n               \r\n     \r\n             //    let splicedArr = arr.splice(operandOnLeftIndex,3);\r\n             //    console.log(splicedArr);\r\n                console.log(arr[operandOnLeftIndex]);\r\n     \r\n                \r\n                result = parseInt(arr[operandOnLeftIndex]) * parseInt(arr[operandOnRightIndex]);\r\n               \r\n               \r\n                console.log(result);\r\n                arr[operandOnLeftIndex] = result;\r\n                console.log(arr);\r\n                arr.splice(operatorIndex,operandOnRightIndex)\r\n                console.log(arr);\r\n               \r\n            }\r\n        })\r\n        \r\n     };\r\n    \r\n    sumLogic=(arr)=>{\r\n       console.log(arr); \r\n       let operandOnLeftIndex;\r\n       let operandOnRightIndex;\r\n       let operatorIndex;\r\n       let result;\r\n       arr.map((item,index)=>{\r\n           console.log(item);\r\n           console.log(index);\r\n           if (item === '+' || arr[index-1] === '+') {\r\n              \r\n            if (arr[index-1] === '+') {\r\n                operatorIndex = index - 1;\r\n                operandOnLeftIndex = index - 2;\r\n                operandOnRightIndex = index ;\r\n               }else{\r\n                operatorIndex = index;\r\n                operandOnLeftIndex = index - 1;\r\n                operandOnRightIndex = index + 1;\r\n               }\r\n              \r\n    \r\n            //    let splicedArr = arr.splice(operandOnLeftIndex,3);\r\n            //    console.log(splicedArr);\r\n               console.log(arr[operandOnLeftIndex]);\r\n    \r\n               \r\n               result = parseInt(arr[operandOnLeftIndex]) + parseInt(arr[operandOnRightIndex]);\r\n              \r\n              \r\n               console.log(result);\r\n               arr[operandOnLeftIndex] = result;\r\n               console.log(arr);\r\n               arr.splice(operatorIndex,operandOnRightIndex)\r\n               console.log(arr);\r\n              \r\n           }\r\n       })\r\n       \r\n    };\r\n    \r\n    subtractionLogic=(arr)=>{\r\n        console.log(arr); \r\n        let operandOnLeftIndex;\r\n        let operandOnRightIndex;\r\n        let operatorIndex;\r\n        let result;\r\n        arr.map((item,index)=>{\r\n            console.log(item);\r\n            console.log(index);\r\n            if (item === '-' || arr[index-1] === '-') {\r\n               \r\n             if (arr[index-1] === '-') {\r\n                 operatorIndex = index - 1;\r\n                 operandOnLeftIndex = index - 2;\r\n                 operandOnRightIndex = index ;\r\n                }else{\r\n                 operatorIndex = index;\r\n                 operandOnLeftIndex = index - 1;\r\n                 operandOnRightIndex = index + 1;\r\n                }\r\n               \r\n     \r\n             //    let splicedArr = arr.splice(operandOnLeftIndex,3);\r\n             //    console.log(splicedArr);\r\n                console.log(arr[operandOnLeftIndex]);\r\n     \r\n                \r\n                result = parseInt(arr[operandOnLeftIndex]) - parseInt(arr[operandOnRightIndex]);\r\n               \r\n               \r\n                console.log(result);\r\n                arr[operandOnLeftIndex] = result;\r\n                console.log(arr);\r\n                arr.splice(operatorIndex,operandOnRightIndex)\r\n                console.log(arr);\r\n               \r\n            }\r\n        })\r\n        \r\n     };\r\n    \r\n    \r\n\r\n    render(){\r\n        return(\r\n            <Auxil>\r\n               <Display stringValue={this.state.stringValue} result={this.state.result} />\r\n               <div className={classes.Calculator}>\r\n                  {this.state.calculatorButtons.map(numbers =><Button number={numbers} add={this.addValuesHandler} />\r\n                  \r\n                )} \r\n               </div>\r\n            </Auxil>\r\n           )\r\n    }\r\n}\r\n\r\n\r\nexport default Calculator;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Calculator from './container/Calculator/Calculator';\n\nReactDOM.render(<Calculator />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}